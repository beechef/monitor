/*

 */
package Client.GUI.Component;

import Client.GUI.Lib.GlobalVariable;
import Client.GUI.Lib.ProcessDTO;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneLayout;
import javax.swing.plaf.basic.BasicScrollBarUI;

/**
 *
 * @author Admin
 */
public class ProcessGUI extends javax.swing.JPanel {

    /**
     * Creates new form ProcessGUI
     */
    public ProcessGUI() {
        initComponents();
        //set jlable color
        this.LabelHeader.setForeground(GlobalVariable.primaryColor);
        //set placeHolder
        this.searchPanel.setPlaceHolderText("Try to find ...");
        //set scrollbar
        setScrollbar(this.scroll);
//        this.scroll.setVerticalScrollBar(new ScrollBar());

        //init process
//        GlobalVariable.processList.add(new ProcessDTO("process1"));
//        GlobalVariable.processList.add(new ProcessDTO("abc"));
//        GlobalVariable.processList.add(new ProcessDTO("123"));
//        GlobalVariable.processList.add(new ProcessDTO("3a"));
//        GlobalVariable.processList.add(new ProcessDTO("process5"));
//        GlobalVariable.processList.add(new ProcessDTO("process6"));

        //render process
        renderProcess(GlobalVariable.processList);
        //handle Search
        handleSearch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelHeader = new javax.swing.JLabel();
        searchPanel = new Client.GUI.Component.SearchPanel();
        headerTableProcess1 = new Client.GUI.Component.HeaderTableProcess();
        scroll = new javax.swing.JScrollPane();
        contentTable = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        LabelHeader.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelHeader.setText("Process management");

        headerTableProcess1.setMinimumSize(new java.awt.Dimension(140, 30));

        scroll.setBorder(null);

        contentTable.setLayout(new javax.swing.BoxLayout(contentTable, javax.swing.BoxLayout.Y_AXIS));
        scroll.setViewportView(contentTable);

        btnRefresh.setBackground(new java.awt.Color(46, 79, 79));
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh");
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(309, 309, 309))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                                .addComponent(btnRefresh))
                            .addComponent(scroll, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headerTableProcess1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(headerTableProcess1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                        .addGap(66, 66, 66))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRefresh)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
        // TODO add your handling code here:
        System.out.println("requesst get all process");
        GlobalVariable.main.sendRequestGetAllProcess();
    }//GEN-LAST:event_btnRefreshMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel LabelHeader;
    public javax.swing.JButton btnRefresh;
    public javax.swing.JPanel contentTable;
    public Client.GUI.Component.HeaderTableProcess headerTableProcess1;
    public javax.swing.JScrollPane scroll;
    public Client.GUI.Component.SearchPanel searchPanel;
    // End of variables declaration//GEN-END:variables

    public void renderProcess(List<ProcessDTO> processList) {
        this.contentTable.removeAll();
        processList.forEach(e -> {
            this.contentTable.add(new RowTableProcess(e));
        });
        
        if(GlobalVariable.main!=null){
            GlobalVariable.main.validate();
            GlobalVariable.main.repaint();
        }

//        this.contentTable.repaint();
    }

    private void setScrollbar(JScrollPane s) {
        s.setComponentZOrder(s.getVerticalScrollBar(), 0);
        s.setComponentZOrder(s.getViewport(), 1);
        s.getVerticalScrollBar().setOpaque(false);
        s.setLayout(new ScrollPaneLayout() {
            @Override
            public void layoutContainer(Container parent) {
                JScrollPane scrollPane = (JScrollPane) parent;

                Rectangle availR = scrollPane.getBounds();
                availR.x = availR.y = 0;

                Insets parentInsets = parent.getInsets();
                availR.x = parentInsets.left;
                availR.y = parentInsets.top;
                availR.width -= parentInsets.left + parentInsets.right;
                availR.height -= parentInsets.top + parentInsets.bottom;

                Rectangle vsbR = new Rectangle();
                vsbR.width = 5;
                vsbR.height = availR.height;
                vsbR.x = availR.x + availR.width - vsbR.width;
                vsbR.y = availR.y;

                if (viewport != null) {
                    viewport.setBounds(availR);
                }
                if (vsb != null) {
                    vsb.setVisible(true);
                    vsb.setBounds(vsbR);
                }
            }
        });
        s.getVerticalScrollBar().setUI(new MyScrollBarUI());
    }

    private void handleSearch() {
        this.searchPanel.InputSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

                    if (searchPanel.InputSearch.getText().isEmpty()) {
                        GlobalVariable.processListStmp.removeAll(GlobalVariable.processListStmp);

                        renderProcess(GlobalVariable.processList);
                    } else {
                        if (!searchPanel.InputSearch.getText().equals(searchPanel.getPlaceHolderText())) {
                            GlobalVariable.processListStmp.removeAll(GlobalVariable.processListStmp);

                            GlobalVariable.processList.forEach(e -> {
                                if (e.getName().contains(searchPanel.InputSearch.getText())) {
                                    GlobalVariable.processListStmp.add(e);
                                }
                            });

                            renderProcess(GlobalVariable.processListStmp);
                        }
                    }
                }

            }

        });
    }

    private void renderTable(List<ProcessDTO> processList) {
        
    }
}

class MyScrollBarUI extends BasicScrollBarUI {

    private final Dimension d = new Dimension();

    @Override
    protected JButton createDecreaseButton(int orientation) {
        return new JButton() {
            @Override
            public Dimension getPreferredSize() {
                return d;
            }
        };
    }

    @Override
    protected JButton createIncreaseButton(int orientation) {
        return new JButton() {
            @Override
            public Dimension getPreferredSize() {
                return d;
            }
        };
    }

    @Override
    protected void paintTrack(Graphics g, JComponent c, Rectangle r) {
    }

    @Override
    protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        Color color = null;
        JScrollBar sb = (JScrollBar) c;
        if (!sb.isEnabled() || r.width > r.height) {
            return;
        } else if (isDragging) {
            color = Color.DARK_GRAY;
        } else if (isThumbRollover()) {
            color = Color.LIGHT_GRAY;
        } else {
            color = Color.GRAY;
        }
        g2.setPaint(color);
        g2.fillRoundRect(r.x, r.y, r.width, r.height, 10, 10);
        g2.setPaint(Color.WHITE);
        g2.drawRoundRect(r.x, r.y, r.width, r.height, 10, 10);
        g2.dispose();
    }

    @Override
    protected void setThumbBounds(int x, int y, int width, int height) {
        super.setThumbBounds(x, y, width, height);
        scrollbar.repaint();
    }
}

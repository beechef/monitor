/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Client.GUI.Component;

import Client.ClientInstance;
import Client.GUI.Lib.ClientDTO;
import Client.GUI.Lib.GlobalVariable;
import SocketMessageReceiver.DataType.ChangeUserNameRequest;
import SocketMessageReceiver.DataType.LoginResultRequest;
import SocketMessageSender.CustomAdminSender.ChangeUserNameSender;
import java.awt.Color;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;

/**
 *
 * @author Admin
 */
public class RowTableClient extends javax.swing.JPanel {

    private ClientDTO client;
    private final int uuidLength = 5;

    public ClientDTO getClient() {
        return client;
    }

    public void setClient(ClientDTO client) {
        this.client = client;
    }

    public RowTableClient(ClientDTO client) {

        this.client = client;

        initComponents();

        //set hover btn status
        setBtnHoverStatus(this);

        //set data
        renderData(this);

        //set Icon
        this.icon.setIcon(new ImageIcon(GlobalVariable.currentPath + GlobalVariable.urlIconAction));

        //xử lý click out side text field name
        setClickOutSideClientName();

        //set hover
        setHover(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        clientName = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        clientId = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        clientIp = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        clientStatus = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        icon = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(204, 204, 204)));
        setMaximumSize(new java.awt.Dimension(2147483647, 46));
        setMinimumSize(new java.awt.Dimension(386, 46));
        setPreferredSize(new java.awt.Dimension(614, 46));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setPreferredSize(new java.awt.Dimension(70, 16));
        add(jLabel3);

        clientName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        clientName.setText("Name");
        clientName.setBorder(null);
        clientName.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        clientName.setMinimumSize(new java.awt.Dimension(100, 16));
        clientName.setPreferredSize(new java.awt.Dimension(100, 16));
        clientName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clientNameKeyPressed(evt);
            }
        });
        add(clientName);

        jTextField1.setBorder(null);
        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField1.setFocusable(false);
        jTextField1.setRequestFocusEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        add(jTextField1);

        clientId.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clientId.setText("uuid");
        add(clientId);

        jTextField2.setBorder(null);
        jTextField2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField2.setFocusable(false);
        jTextField2.setRequestFocusEnabled(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        add(jTextField2);

        clientIp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clientIp.setText("IP Address");
        add(clientIp);

        jTextField3.setBorder(null);
        jTextField3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField3.setFocusable(false);
        jTextField3.setRequestFocusEnabled(false);
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        add(jTextField3);

        clientStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clientStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientStatus.setText("Status");
        clientStatus.setMaximumSize(new java.awt.Dimension(100, 30));
        clientStatus.setMinimumSize(new java.awt.Dimension(100, 40));
        clientStatus.setPreferredSize(new java.awt.Dimension(100, 40));
        add(clientStatus);

        jTextField4.setBorder(null);
        jTextField4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField4.setFocusable(false);
        jTextField4.setRequestFocusEnabled(false);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        add(jTextField4);
        add(icon);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setPreferredSize(new java.awt.Dimension(100, 16));
        add(jLabel4);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void clientNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (clientName.getText().isEmpty()) {
                clientName.setText(client.getName());
            } else {
                if (!clientName.getText().equals(client.getName())) {
                    setClientName(clientName.getText());

                }
            }
        }
    }//GEN-LAST:event_clientNameKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clientId;
    private javax.swing.JLabel clientIp;
    private javax.swing.JTextField clientName;
    private javax.swing.JLabel clientStatus;
    private javax.swing.JLabel icon;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    private void setBtnHoverStatus(RowTableClient aThis) {
        aThis.icon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aThis.icon.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aThis.icon.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                System.out.println("render new jfarme");
//                System.out.println(GlobalVariable.listClient.toString());
//                GlobalVariable.main.validate();
//                GlobalVariable.main.repaint();

            }
        });
    }

    private void renderData(RowTableClient aThis) {
        aThis.clientName.setText(client.getName());
        if (client.getID().length() > uuidLength) {
            aThis.clientId.setText(client.getID().substring(0, uuidLength) + "...");
        } else {
            aThis.clientId.setText(client.getID() + "");

        }
        aThis.clientIp.setText(client.getIpAdress().replace("/", ""));
        if (aThis.client.getStatus()) {
            aThis.clientStatus.setText("Available");
            aThis.clientStatus.setForeground(GlobalVariable.primaryColor);
        } else {
            aThis.clientStatus.setText("Unavailable");
            aThis.clientStatus.setForeground(GlobalVariable.WarningColor);
        }

    }

    private void setClickOutSideClientName() {
        //focuslost
        this.clientName.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {

            }

            @Override
            public void focusLost(FocusEvent e) {
                if (clientName.getText().isEmpty()) {
                    clientName.setText(client.getName());
                } else {
                    if (!clientName.getText().equals(client.getName())) {
                        setClientName(clientName.getText());
                    }
                }
            }

        });
    }

    public void setClientName(String text) {

        System.out.println("request change name");
        var changeNameSender = new ChangeUserNameSender(ClientInstance.tcpClient);
        changeNameSender.send(null, new ChangeUserNameRequest(GlobalVariable.tokenAdmin, this.client.getID(), text));

    }

    private void setHover(RowTableClient row) {
        row.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //request pick client
                row.setBackground(GlobalVariable.activeColor);
                row.jTextField1.setBackground(GlobalVariable.activeColor);
                row.jTextField2.setBackground(GlobalVariable.activeColor);
                row.jTextField3.setBackground(GlobalVariable.activeColor);
                row.jTextField4.setBackground(GlobalVariable.activeColor);
                row.clientName.setBackground(GlobalVariable.activeColor);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                row.setBackground(Color.WHITE);
                row.jTextField1.setBackground(Color.WHITE);
                row.jTextField2.setBackground(Color.WHITE);
                row.jTextField3.setBackground(Color.WHITE);
                row.jTextField4.setBackground(Color.WHITE);
                row.clientName.setBackground(Color.WHITE);

            }
        });
        row.clientName.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //request pick client
                row.setBackground(GlobalVariable.activeColor);
                row.jTextField1.setBackground(GlobalVariable.activeColor);
                row.jTextField2.setBackground(GlobalVariable.activeColor);
                row.jTextField3.setBackground(GlobalVariable.activeColor);
                row.jTextField4.setBackground(GlobalVariable.activeColor);
                row.clientName.setBackground(GlobalVariable.activeColor);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                row.setBackground(Color.WHITE);
                row.jTextField1.setBackground(Color.WHITE);
                row.jTextField2.setBackground(Color.WHITE);
                row.jTextField3.setBackground(Color.WHITE);
                row.jTextField4.setBackground(Color.WHITE);
                row.clientName.setBackground(Color.WHITE);

            }
        });
        row.jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //request pick client
                row.setBackground(GlobalVariable.activeColor);
                row.jTextField1.setBackground(GlobalVariable.activeColor);
                row.jTextField2.setBackground(GlobalVariable.activeColor);
                row.jTextField3.setBackground(GlobalVariable.activeColor);
                row.jTextField4.setBackground(GlobalVariable.activeColor);
                row.clientName.setBackground(GlobalVariable.activeColor);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                row.setBackground(Color.WHITE);
                row.jTextField1.setBackground(Color.WHITE);
                row.jTextField2.setBackground(Color.WHITE);
                row.jTextField3.setBackground(Color.WHITE);
                row.jTextField4.setBackground(Color.WHITE);
                row.clientName.setBackground(Color.WHITE);

            }
        });
        row.jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //request pick client
                row.setBackground(GlobalVariable.activeColor);
                row.jTextField1.setBackground(GlobalVariable.activeColor);
                row.jTextField2.setBackground(GlobalVariable.activeColor);
                row.jTextField3.setBackground(GlobalVariable.activeColor);
                row.jTextField4.setBackground(GlobalVariable.activeColor);
                row.clientName.setBackground(GlobalVariable.activeColor);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                row.setBackground(Color.WHITE);
                row.jTextField1.setBackground(Color.WHITE);
                row.jTextField2.setBackground(Color.WHITE);
                row.jTextField3.setBackground(Color.WHITE);
                row.jTextField4.setBackground(Color.WHITE);
                row.clientName.setBackground(Color.WHITE);

            }
        });
        row.jTextField3.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //request pick client
                row.setBackground(GlobalVariable.activeColor);
                row.jTextField1.setBackground(GlobalVariable.activeColor);
                row.jTextField2.setBackground(GlobalVariable.activeColor);
                row.jTextField3.setBackground(GlobalVariable.activeColor);
                row.jTextField4.setBackground(GlobalVariable.activeColor);
                row.clientName.setBackground(GlobalVariable.activeColor);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                row.setBackground(Color.WHITE);
                row.jTextField1.setBackground(Color.WHITE);
                row.jTextField2.setBackground(Color.WHITE);
                row.jTextField3.setBackground(Color.WHITE);
                row.jTextField4.setBackground(Color.WHITE);
                row.clientName.setBackground(Color.WHITE);

            }
        });
        row.jTextField4.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //request pick client
                row.setBackground(GlobalVariable.activeColor);
                row.jTextField1.setBackground(GlobalVariable.activeColor);
                row.jTextField2.setBackground(GlobalVariable.activeColor);
                row.jTextField3.setBackground(GlobalVariable.activeColor);
                row.jTextField4.setBackground(GlobalVariable.activeColor);
                row.clientName.setBackground(GlobalVariable.activeColor);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                row.setBackground(Color.WHITE);
                row.jTextField1.setBackground(Color.WHITE);
                row.jTextField2.setBackground(Color.WHITE);
                row.jTextField3.setBackground(Color.WHITE);
                row.jTextField4.setBackground(Color.WHITE);
                row.clientName.setBackground(Color.WHITE);

            }
        });
        row.icon.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //request pick client
                row.setBackground(GlobalVariable.activeColor);
                row.jTextField1.setBackground(GlobalVariable.activeColor);
                row.jTextField2.setBackground(GlobalVariable.activeColor);
                row.jTextField3.setBackground(GlobalVariable.activeColor);
                row.jTextField4.setBackground(GlobalVariable.activeColor);
                row.clientName.setBackground(GlobalVariable.activeColor);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                row.setBackground(Color.WHITE);
                row.jTextField1.setBackground(Color.WHITE);
                row.jTextField2.setBackground(Color.WHITE);
                row.jTextField3.setBackground(Color.WHITE);
                row.jTextField4.setBackground(Color.WHITE);
                row.clientName.setBackground(Color.WHITE);

            }
        });

    }

}

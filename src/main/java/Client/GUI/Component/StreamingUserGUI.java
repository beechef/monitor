/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client.GUI.Component;

import Client.ClientInstance;
import Client.GUI.Lib.ClientDTO;
import Client.GUI.Lib.GlobalVariable;
import Server.EventDispatcher.EventDispatcher;
import SocketMessageReceiver.CustomAdminReceiver.GetImageResultReceiver;
import SocketMessageReceiver.DataType.GetImage.GetImageRequestAdminSide;
import SocketMessageReceiver.DataType.GetImage.GetImageResultServerSide;
import SocketMessageSender.CustomAdminSender.GetImageSender;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.imageio.ImageIO;

/**
 *
 * @author Admin
 */
public class StreamingUserGUI extends javax.swing.JFrame {

    /**
     * Creates new form StreamingUserGUI
     */
    private ClientDTO client = null;

    public static Thread streamingThread;
    public static boolean isStreaming = false;
    private HashMap<Thread, Boolean> flags = new HashMap<>();

    public StreamingUserGUI(ClientDTO client) {
        this.client = client;
        initComponents();
        init();
    }

    public void init() {
        isStreaming = true;
        panelStream.setVisible(true);

        listenEvent();

        if (streamingThread != null) {
            flags.put(streamingThread, false);

            streamingThread.interrupt();
            streamingThread = null;
        }

        streamingThread = new Thread(() -> {
            var fps = 12;
            var sender = new GetImageSender(ClientInstance.tcpClient);

            while (true) {
                var value = flags.get(streamingThread);

                if (value != null && !value || streamingThread != null && streamingThread.isInterrupted() || !isVisible()) {
                    return;
                }

                sender.send(null, new GetImageRequestAdminSide(GlobalVariable.tokenAdmin, this.client.getID()));

                try {
                    Thread.sleep(1000 / fps);
                } catch (InterruptedException e) {
//                    throw new RuntimeException(e);
//                    e.printStackTrace();
                    System.out.println("Streaming is interrupted");

                }
            }
        });

        streamingThread.start();
        flags.put(streamingThread, true);
    }

    private void listenEvent() {
        EventDispatcher.startListening(new GetImageResultReceiver(this::render));
    }

    private final ArrayList<Byte> bytes = new ArrayList<>();

    synchronized private void render(GetImageResultServerSide data) {
        if (data.uuid == null ? this.client.getID() != null : !data.uuid.equals(this.client.getID())) {
            return;
        }
        if (data.image.length == 0) {
            return;
        }

        for (var b : data.image) {
            bytes.add(b);
        }

        if (data.isEnd) {
            var imageBytes = new byte[bytes.size()];
            for (int i = 0; i < bytes.size(); i++) {
                imageBytes[i] = bytes.get(i);
            }

            var width = panelStream.getWidth();
            var height = panelStream.getHeight();
            try {
                var bais = new ByteArrayInputStream(imageBytes);
                var image = ImageIO.read(bais);

                panelStream.getGraphics().drawImage(image, 0, 0, width, height, null);

//                panelStream.validate();
//                panelStream.repaint();
                GlobalVariable.main.validate();
                image.flush();
//                GlobalVariable.main.repaint();
            } catch (IOException e) {
                e.printStackTrace();
                System.out.printf("Wrong Message");
            }
            bytes.clear();
        }
    }

    public void reset() {
        isStreaming = false;
        flags.put(streamingThread, false);

        streamingThread.interrupt();
        streamingThread = null;
        System.out.println("reset streming");
        panelStream.setVisible(false);

        removeEvent();
    }

    private void removeEvent() {
        EventDispatcher.stopListening(new GetImageResultReceiver(this::render));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelStream = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout panelStreamLayout = new javax.swing.GroupLayout(panelStream);
        panelStream.setLayout(panelStreamLayout);
        panelStreamLayout.setHorizontalGroup(
            panelStreamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        panelStreamLayout.setVerticalGroup(
            panelStreamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        getContentPane().add(panelStream, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StreamingUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StreamingUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StreamingUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StreamingUserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StreamingUserGUI(new ClientDTO()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelStream;
    // End of variables declaration//GEN-END:variables
}
